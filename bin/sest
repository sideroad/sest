#!/usr/bin/env node

const fs = require("fs-extra");
const opts = require("opts");
const path = require("path");
const sest = require("../dist/bundle");
const parse = require("csv-parse/lib/sync");

const options = [
  {
    short: "f",
    long: "file",
    required: true,
    value: true,
    description: "URL listed file path"
  },
  {
    short: "d",
    long: "dist-dir",
    value: true,
    description: "dist directory path (default: snapshots)"
  },
  {
    short: "t",
    long: "threshold",
    value: true,
    description: "threshold percentage (default: 10)"
  },
  {
    short: "c",
    long: "cookie-file",
    value: true,
    description: "cookie listed file path"
  },
  {
    short: "w",
    long: "width",
    value: true,
    description: "browser width (default: 1280)"
  },
  {
    short: "h",
    long: "height",
    value: true,
    description: "browser height (default: 800)"
  },
  {
    short: "p",
    long: "proxy",
    value: true,
    description: "proxy server"
  },
  {
    short: "ua",
    long: "user-agent",
    value: true,
    description: "user agent"
  }
];

opts.parse(options);
const file = path.join(process.cwd(), opts.get("f"));

if (!fs.existsSync(file)) {
  console.error("File not found", file);
  process.exit(1);
}

const lines = parse(fs.readFileSync(file, "utf8"), {
  columns: ["name", "url", "actions"]
});

const cookies = [];

if (opts.get("c")) {
  const cookieFile = fs.readFileSync(
    path.join(process.cwd(), opts.get("c")),
    "utf8"
  );
  cookieFile
    .split(/\r?\n/)
    .filter(line => line)
    .map(line => {
      const [whole, name, value, remains] = line.match(/([^=]+)=([^;]+)(.*)/);
      const options = remains
        .split(/; /)
        .filter(set => set)
        .reduce((memo, set) => {
          const [key, val] = set.split(/=/);
          memo[key] =
            key === "expires"
              ? new Date(val).getTime()
              : key === "httpOnly" || key === "secure" ? JSON.parse(val) : val;
          return memo;
        }, {});
      cookies.push(
        Object.assign(
          {
            name,
            value
          },
          options
        )
      );
    });
}

sest({
  targets: lines.map(function(item) {
    return {
      name: item.name,
      url: item.url,
      actions: item.actions.split(",").filter(function(action) {
        return action;
      })
    };
  }),
  cookies: cookies,
  dist: path.join(process.cwd(), opts.get("d") ? opts.get("d") : "snapshots"),
  threashold: opts.get("t") ? Number(opts.get("t")) : undefined,
  width: opts.get("w") ? Number(opts.get("w")) : undefined,
  height: opts.get("h") ? Number(opts.get("h")) : undefined,
  proxy: opts.get("p"),
  userAgent: opts.get("ua")
});
